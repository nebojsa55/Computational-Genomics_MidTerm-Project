{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "ML-Example-notebook.ipynb",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3",
      "language": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/nebojsa55/Computational-Genomics_MidTerm-Project/blob/master/model_training.pynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Y4i3AN50qb3V",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03555bca-3a86-4549-a070-e255b8ca74e2"
      },
      "source": [
        "import numpy as np\n",
        "from google.colab import drive\n",
        "import tqdm\n",
        "import cv2 \n",
        "import time\n",
        "import pickle\n",
        "import glob\n",
        "\n",
        "\n",
        "drive.mount('/content/drive')\n",
        "\n",
        "# Navigate to the folder containing our data\n",
        "%cd 'drive/MyDrive/ETF/Master/KV'\n"
      ],
      "execution_count": 1,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n",
            "/content/drive/MyDrive/ETF/Master/KV\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "VnnfKMy2qhpV",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4e9a4b92-afad-4edb-918b-11cb63e01748"
      },
      "source": [
        "# Verify the chosen folder\n",
        "!ls"
      ],
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            " Dataset   ESR.py  'KV - predavanja'   __pycache__   utils\n"
          ],
          "name": "stdout"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c0GJIKb78vuu"
      },
      "source": [
        "import os\n",
        "import sys\n",
        "sys.path.append(os.getcwd() + '/utils')"
      ],
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "j9Ge7ARb73bk",
        "outputId": "591a936c-fbd7-43b5-97eb-f58c287fc192"
      },
      "source": [
        "# Import the Explicit Shape Regression library\n",
        "import ESR\n",
        "from pts_file_handler import load_pts\n",
        "\n",
        "# Get the images \n",
        "\n",
        "image_names = []\n",
        "landmarks = []\n",
        "\n",
        "path_test_img = 'Dataset/trainset_boxed/'\n",
        "ext_test_img = '.jpg'\n",
        "\n",
        "temp_all_image_names = glob.glob(path_test_img + '*' + ext_test_img)\n",
        "image_names.extend([n.split('.')[0] for n in temp_all_image_names]) \n",
        "\n",
        "images = []\n",
        "\n",
        "for img_name in tqdm.tqdm(image_names, total = len(image_names), unit = 'slika', desc = 'Ucitavanje trening slika . . .'):    \n",
        "    images.append(cv2.imread(img_name + ext_test_img))\n",
        "    landmarks.append(load_pts(img_name + '.pts'))"
      ],
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Ucitavanje trening slika . . .: 100%|██████████| 2326/2326 [22:05<00:00,  1.76slika/s]\n"
          ],
          "name": "stderr"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 747
        },
        "id": "B_dXPvVe84ye",
        "outputId": "13c65beb-e365-41ec-e19f-8795d112f42d"
      },
      "source": [
        "# Train the regressor\n",
        "\n",
        "R = ESR.ESR()\n",
        "\n",
        "time_start = time.time()\n",
        "\n",
        "R.train(\n",
        "    train_img = images,\n",
        "    bench_landmarks = landmarks,\n",
        "    N_aug = 20,\n",
        "    max_bagging = 5,\n",
        "    path = 'ESR_model_v1.pickle'\n",
        "    )"
      ],
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "text": [
            "Ucitavanje trening slika: 100%|██████████| 2326/2326 [00:03<00:00, 583.71 slika/s]\n",
            "Ukupan trening progres:   0%|          | 0/10 [00:00<?, ?stage/s]"
          ],
          "name": "stderr"
        },
        {
          "output_type": "stream",
          "text": [
            "Izdvajanje feature piksela u etapi: 0\n",
            "Treniranje stage 0 regresora\n"
          ],
          "name": "stdout"
        },
        {
          "output_type": "stream",
          "text": [
            "\n",
            "Trening faza 1 od 10:   0%|          | 0/500 [00:00<?, ?fern/s]\u001b[A\n",
            "Trening faza 1 od 10:   0%|          | 1/500 [00:05<47:13,  5.68s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   0%|          | 2/500 [00:11<47:02,  5.67s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   1%|          | 3/500 [00:16<46:57,  5.67s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   1%|          | 4/500 [00:22<46:49,  5.66s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   1%|          | 5/500 [00:28<46:47,  5.67s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   1%|          | 6/500 [00:34<46:42,  5.67s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   1%|▏         | 7/500 [00:39<46:53,  5.71s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   2%|▏         | 8/500 [00:45<46:40,  5.69s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   2%|▏         | 9/500 [00:51<46:25,  5.67s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   2%|▏         | 10/500 [00:56<46:09,  5.65s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   2%|▏         | 11/500 [01:02<45:59,  5.64s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   2%|▏         | 12/500 [01:08<46:00,  5.66s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   3%|▎         | 13/500 [01:13<46:04,  5.68s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   3%|▎         | 14/500 [01:19<46:04,  5.69s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   3%|▎         | 15/500 [01:25<46:03,  5.70s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   3%|▎         | 16/500 [01:30<45:46,  5.68s/fern]\u001b[A\n",
            "Trening faza 1 od 10:   3%|▎         | 17/500 [01:36<45:42,  5.68s/fern]\u001b[A"
          ],
          "name": "stderr"
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-7-08a09f9b8c10>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     10\u001b[0m     \u001b[0mN_aug\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     11\u001b[0m     \u001b[0mmax_bagging\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 12\u001b[0;31m     \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m'ESR_model_v1.pickle'\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     13\u001b[0m     )\n",
            "\u001b[0;32m/content/drive/MyDrive/ETF/Master/KV/ESR.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(self, train_img, bench_landmarks, N_aug, max_bagging, T, K, P, F, local_coord_offset, path)\u001b[0m\n\u001b[1;32m    117\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    118\u001b[0m             \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'Treniranje stage '\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mstr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mstage\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m' regresora'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 119\u001b[0;31m             \u001b[0mcurrent_stage_regressor\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mlearn_stage_regressor\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mK\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mpixel_feat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    120\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    121\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mRt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mappend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcurrent_stage_regressor\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlocal_coords\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/content/drive/MyDrive/ETF/Master/KV/ESR.py\u001b[0m in \u001b[0;36mlearn_stage_regressor\u001b[0;34m(self, Y, K, F, pixel_features, threshold_multiplier, beta)\u001b[0m\n\u001b[1;32m    433\u001b[0m                                                                                    \u001b[0mpixel_features\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    434\u001b[0m                                                                                    \u001b[0mpix_cov\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 435\u001b[0;31m                                                                                    F)\n\u001b[0m\u001b[1;32m    436\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    437\u001b[0m             \u001b[0;31m# Random prag\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/content/drive/MyDrive/ETF/Master/KV/ESR.py\u001b[0m in \u001b[0;36mcorrelation_feature_selection\u001b[0;34m(self, Y_regression_target, pixel_features, pix_cov, F)\u001b[0m\n\u001b[1;32m    384\u001b[0m                     \u001b[0mimenilac\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msqrt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mY_var\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mpix_cov\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0mpix_cov\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m*\u001b[0m \u001b[0mpix_cov\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m)\u001b[0m \u001b[0;31m#Formula 11\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    385\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 386\u001b[0;31m                     \u001b[0;32mif\u001b[0m \u001b[0mimenilac\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    387\u001b[0m                         \u001b[0mcorr_matrix\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mj\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m-\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    388\u001b[0m                     \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "zkSRc-atFQ2k"
      },
      "source": [
        ""
      ],
      "execution_count": null,
      "outputs": []
    }
  ]
}